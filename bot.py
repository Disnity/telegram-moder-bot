from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from datetime import datetime
import json

# --- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è ---
ban_keywords = {
    "–æ—Å–∫ —Ä–æ–¥": ("/ban", "7", "–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ —Ä–æ–¥–Ω–∏"),
    "–Ω—Ä–ø –æ–±–º–∞–Ω": ("/permban", "", "–ù—Ä–ø –æ–±–º–∞–Ω"),
    "—É–ø–æ–º —Ä–æ–¥": ("/mute", "120", "–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–æ–¥–Ω–∏"),
    "–¥–º": ("/jail", "60", "DeathMatch"),
    "–¥–±": ("/jail", "60", "DriveBy"),
    "–∫–∞–ø—Å": ("/mute", "30", "CapsLock"),
    "–º–≥": ("/mute", "30", "MetaGaming"),
    "–ø—Ä–æ–≤–æ": ("/jail", "30", "–ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è –≥–æ—Å—Å"),
    "–ø–æ–ø—ã—Ç–∫–∞": ("/permban", "", "–ü–æ–ø—ã—Ç–∫–∞ –ù—Ä–ø –æ–±–º–∞–Ω–∞"),
    "—á–∏—Ç—ã": ("/permban", "", "–°—Ç–æ—Ä–æ–Ω–Ω–µ–µ –ü–û"),
    "–∞–º–æ—Ä–∞–ª": ("/jail", "30", "–ê–º–æ—Ä–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"),
    "–∫–æ–ø": ("/warn", "", "–ù—Ä–ø –∫–æ–ø"),
    "–æ—Å–∫ –∞–¥–º": ("/mute", "180", "–ù–µ—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞–¥–º"),
}

# --- –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π ---
user_stats = {}

# --- –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ ---
action_emojis = {
    "/ban": "üî¥",
    "/permban": "üî¥",
    "/jail": "üü°",
    "/mute": "üü°",
    "/warn": "üü°",
}

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä. –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø—Ä–æ–≤–µ—Ä—é –µ–≥–æ.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è
async def check_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text.lower()
    words = update.message.text.split()
    username = words[0] if words else ""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫—É
    link = ""
    for word in words[1:]:
        if word.startswith("http://") or word.startswith("https://"):
            link = word
            break

    for keyword, (cmd, num, reason) in ban_keywords.items():
        if keyword in message_text:
            ban_command = f"{cmd} {username} {num} {reason} F"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ
            if username not in user_stats:
                user_stats[username] = []
            user_stats[username].append({
                "cmd": cmd,
                "reason": reason,
                "link": link,
                "date": datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
                "text": ban_command  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–æ—Ä–º—É
            })

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await update.message.reply_text(ban_command)

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await update.message.delete()
            except:
                pass

            return

# /stats –ù–∏–∫–Ω–µ–π–º
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /stats nickname")
        return

    nickname = context.args[0]
    if nickname not in user_stats:
        await update.message.reply_text("–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –∏–≥—Ä–æ–∫—É.")
        return

    messages = []
    for entry in user_stats[nickname]:
        cmd = entry["cmd"]
        reason = entry["reason"]
        link = entry["link"]
        date = entry["date"]
        emoji = action_emojis.get(cmd, "üü¢")
        text = f"{emoji} <b>–ù–∏–∫:</b> {nickname}\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n<b>–î–∞—Ç–∞:</b> {date}"
        if link:
            text += f"\n<a href='{link}'>–°—Å—ã–ª–∫–∞</a>"
        messages.append(text)
        messages.append("-" * 30)
    await update.message.reply_text("\n".join(messages), parse_mode="HTML", disable_web_page_preview=False)

# /last N [nickname]
async def last(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /last N [nickname]")
        return

    N_arg = context.args[0]
    if not N_arg.isdigit():
        await update.message.reply_text("–ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ N")
        return

    N = int(N_arg)
    nickname = context.args[1] if len(context.args) > 1 else None

    all_entries = []
    for user, entries in user_stats.items():
        if nickname and user != nickname:
            continue
        for entry in entries:
            all_entries.append((user, entry))

    all_entries.sort(key=lambda x: x[1]["date"], reverse=True)

    for user, entry in all_entries[:N]:
        await update.message.reply_text(entry["text"])

# /allstats
async def allstats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not user_stats:
        await update.message.reply_text("–ë–∞–∑–∞ –ø—É—Å—Ç–∞—è.")
        return
    await update.message.reply_text("–ò–≥—Ä–æ–∫–∏ —Å –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏:\n" + "\n".join(user_stats.keys()))

# /search —Å–ª–æ–≤–æ
async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search —Å–ª–æ–≤–æ")
        return

    word = context.args[0].lower()
    result = []
    for nickname, entries in user_stats.items():
        for entry in entries:
            if word in entry["reason"].lower():
                result.append(f"{nickname}: {entry['reason']} ({entry['date']})")
    if not result:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    await update.message.reply_text("\n".join(result))

# /clear –ù–∏–∫–Ω–µ–π–º
async def clear(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /clear nickname")
        return
    nickname = context.args[0]
    if nickname in user_stats:
        del user_stats[nickname]
        await update.message.reply_text(f"–ò—Å—Ç–æ—Ä–∏—è {nickname} —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await update.message.reply_text("–ò–≥—Ä–æ–∫–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ.")

# /clearall
async def clearall(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_stats.clear()
    await update.message.reply_text("–ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞.")

# /export
async def export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open("user_stats.json", "w", encoding="utf-8") as f:
        json.dump(user_stats, f, ensure_ascii=False, indent=4)
    await update.message.reply_document(open("user_stats.json", "rb"))

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    TOKEN = "8174814912:AAHjCYdcByjzG-EmeZC0ttDx-6rFCign3sA"
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_message))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("last", last))
    app.add_handler(CommandHandler("allstats", allstats))
    app.add_handler(CommandHandler("search", search))
    app.add_handler(CommandHandler("clear", clear))
    app.add_handler(CommandHandler("clearall", clearall))
    app.add_handler(CommandHandler("export", export))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
